<?php

/**
 * This file defines SOLID-style PHP interfaces for Sqlx classes.
 * Autogenerated. Do not edit manually.
 */

namespace Sqlx;

interface ClauseInterface
{
    public function allowed(array $allowed_columns): Sqlx\SelectClause;
    public function __invoke(array $columns): Sqlx\SelectClauseRendered;
    public function input(array $columns): Sqlx\SelectClauseRendered;
    public function __construct(array $allowed_columns);
    public function __invoke(array $columns): Sqlx\ByClauseRendered;
    public function input(array $columns): Sqlx\ByClauseRendered;
    public function __construct(array $allowed_columns);
    public function __invoke(?int $page_number, ?int $per_page): Sqlx\PaginateClauseRendered;
    public function perPage(int $per_page): void;
    public function minPerPage(int $min_per_page): void;
    public function maxPerPage(int $max_per_page): void;
    public function input(?int $page_number, ?int $per_page): Sqlx\PaginateClauseRendered;
    public function __construct();
    public function __construct();
}

interface ClauseRenderedInterface
{
    public function __construct();
    public function __construct();
    public function __construct();
}

interface DriverInterface
{
    public function prepare(string $query): Sqlx\PgPreparedQuery;
    public function builder(): Sqlx\PgWriteQueryBuilder;
    public function readBuilder(): Sqlx\PgReadQueryBuilder;
    public function quote(mixed $param): string;
    public function metaQuoteLike(mixed $param): string;
    public function assocArrays(): bool;
    public function queryRow(string $query, ?array $parameters): mixed;
    public function queryValue(string $query, ?array $parameters, mixed $column): mixed;
    public function queryValueAssoc(string $query, ?array $parameters, mixed $column): mixed;
    public function queryValueObj(string $query, ?array $parameters, mixed $column): mixed;
    public function queryMaybeValue(string $query, ?array $parameters, mixed $column): mixed;
    public function queryMaybeValueAssoc(string $query, ?array $parameters, mixed $column): mixed;
    public function queryMaybeValueObj(string $query, ?array $parameters, mixed $column): mixed;
    public function queryRowAssoc(string $query, ?array $parameters): mixed;
    public function queryRowObj(string $query, ?array $parameters): mixed;
    public function queryMaybeRow(string $query, ?array $parameters): mixed;
    public function queryMaybeRowAssoc(string $query, ?array $parameters): mixed;
    public function queryMaybeRowObj(string $query, ?array $parameters): mixed;
    public function queryColumn(string $query, ?array $parameters, mixed $column): array;
    public function queryColumnAssoc(string $query, ?array $parameters, mixed $column): array;
    public function queryColumnObj(string $query, ?array $parameters, mixed $column): array;
    public function queryAll(string $query, ?array $parameters): array;
    public function queryAllAssoc(string $query, ?array $parameters): array;
    public function queryAllObj(string $query, ?array $parameters): array;
    public function queryDictionary(string $query, ?array $parameters): mixed;
    public function queryDictionaryAssoc(string $query, ?array $parameters): mixed;
    public function queryDictionaryObj(string $query, ?array $parameters): mixed;
    public function queryGroupedDictionary(string $query, ?array $parameters): mixed;
    public function queryGroupedDictionaryAssoc(string $query, ?array $parameters): mixed;
    public function queryGroupedDictionaryObj(string $query, ?array $parameters): mixed;
    public function queryColumnDictionary(string $query, ?array $parameters): mixed;
    public function queryColumnDictionaryAssoc(string $query, ?array $parameters): mixed;
    public function queryColumnDictionaryObj(string $query, ?array $parameters): mixed;
    public function queryGroupedColumnDictionaryAssoc(string $query, ?array $parameters): mixed;
    public function queryGroupedColumnDictionaryObj(string $query, ?array $parameters): mixed;
    public function queryGroupedColumnDictionary(string $query, ?array $parameters): mixed;
    public function execute(string $query, ?array $parameters): int;
    public function insert(string $table, array $row): int;
    public function dry(string $query, ?array $parameters): array;
    public function begin(callable $callable): void;
    public function savepoint(string $savepoint): void;
    public function rollbackToSavepoint(string $savepoint): void;
    public function releaseSavepoint(string $savepoint): void;
    public function __construct(mixed $url_or_options);
    public function prepare(string $query): Sqlx\Driver\MssqlPreparedQuery;
    public function builder(): Sqlx\MssqlWriteQueryBuilder;
    public function readBuilder(): Sqlx\MssqlReadQueryBuilder;
    public function quote(mixed $param): string;
    public function metaQuoteLike(mixed $param): string;
    public function assocArrays(): bool;
    public function queryRow(string $query, ?array $parameters): mixed;
    public function queryValue(string $query, ?array $parameters, mixed $column): mixed;
    public function queryValueAssoc(string $query, ?array $parameters, mixed $column): mixed;
    public function queryValueObj(string $query, ?array $parameters, mixed $column): mixed;
    public function queryMaybeValue(string $query, ?array $parameters, mixed $column): mixed;
    public function queryMaybeValueAssoc(string $query, ?array $parameters, mixed $column): mixed;
    public function queryMaybeValueObj(string $query, ?array $parameters, mixed $column): mixed;
    public function queryRowAssoc(string $query, ?array $parameters): mixed;
    public function queryRowObj(string $query, ?array $parameters): mixed;
    public function queryMaybeRow(string $query, ?array $parameters): mixed;
    public function queryMaybeRowAssoc(string $query, ?array $parameters): mixed;
    public function queryMaybeRowObj(string $query, ?array $parameters): mixed;
    public function queryColumn(string $query, ?array $parameters, mixed $column): array;
    public function queryColumnAssoc(string $query, ?array $parameters, mixed $column): array;
    public function queryColumnObj(string $query, ?array $parameters, mixed $column): array;
    public function queryAll(string $query, ?array $parameters): array;
    public function queryAllAssoc(string $query, ?array $parameters): array;
    public function queryAllObj(string $query, ?array $parameters): array;
    public function queryDictionary(string $query, ?array $parameters): mixed;
    public function queryDictionaryAssoc(string $query, ?array $parameters): mixed;
    public function queryDictionaryObj(string $query, ?array $parameters): mixed;
    public function queryGroupedDictionary(string $query, ?array $parameters): mixed;
    public function queryGroupedDictionaryAssoc(string $query, ?array $parameters): mixed;
    public function queryGroupedDictionaryObj(string $query, ?array $parameters): mixed;
    public function queryColumnDictionary(string $query, ?array $parameters): mixed;
    public function queryColumnDictionaryAssoc(string $query, ?array $parameters): mixed;
    public function queryColumnDictionaryObj(string $query, ?array $parameters): mixed;
    public function queryGroupedColumnDictionaryAssoc(string $query, ?array $parameters): mixed;
    public function queryGroupedColumnDictionaryObj(string $query, ?array $parameters): mixed;
    public function queryGroupedColumnDictionary(string $query, ?array $parameters): mixed;
    public function execute(string $query, ?array $parameters): int;
    public function insert(string $table, array $row): int;
    public function dry(string $query, ?array $parameters): array;
    public function begin(callable $callable): void;
    public function savepoint(string $savepoint): void;
    public function rollbackToSavepoint(string $savepoint): void;
    public function releaseSavepoint(string $savepoint): void;
    public function __construct(mixed $url_or_options);
}

interface FactoryInterface
{
    public function make(mixed $url_or_options): mixed;
    public function __construct();
}

interface OptionsInterface
{
    public function __construct();
}

interface PreparedQueryInterface
{
    public function queryColumnDictionary(?array $parameters): mixed;
    public function queryColumnDictionaryAssoc(?array $parameters): mixed;
    public function queryColumnDictionaryObj(?array $parameters): mixed;
    public function queryDictionary(?array $parameters): mixed;
    public function queryDictionaryAssoc(?array $parameters): mixed;
    public function queryDictionaryObj(?array $parameters): mixed;
    public function queryGroupedDictionary(?array $parameters): mixed;
    public function queryGroupedDictionaryAssoc(?array $parameters): mixed;
    public function queryGroupedDictionaryObj(?array $parameters): mixed;
    public function queryGroupedColumnDictionary(?array $parameters): mixed;
    public function queryGroupedColumnDictionaryAssoc(?array $parameters): mixed;
    public function queryGroupedColumnDictionaryObj(?array $parameters): mixed;
    public function execute(?array $parameters): int;
    public function queryRow(?array $parameters): mixed;
    public function queryRowAssoc(?array $parameters): mixed;
    public function queryRowObj(?array $parameters): mixed;
    public function queryMaybeRow(?array $parameters): mixed;
    public function queryMaybeRowAssoc(?array $parameters): mixed;
    public function queryMaybeRowObj(?array $parameters): mixed;
    public function queryColumn(?array $parameters, mixed $column): array;
    public function queryColumnAssoc(?array $parameters, mixed $column): array;
    public function queryColumnObj(?array $parameters, mixed $column): array;
    public function queryAll(?array $parameters): array;
    public function queryAllAssoc(?array $parameters): array;
    public function queryAllObj(?array $parameters): array;
    public function __construct();
}

interface ReadQueryBuilderInterface
{
    public function builder(): Sqlx\PgReadQueryBuilder;
    public function factory(Sqlx\PgDriver $driver): Sqlx\PgReadQueryBuilder;
    public function quote(mixed $param): string;
    public function metaQuoteLike(mixed $param): string;
    public function onConflict(mixed $target, mixed $set): Sqlx\PgReadQueryBuilder;
    public function onDuplicateKeyUpdate(mixed $set): Sqlx\PgReadQueryBuilder;
    public function innerJoin(string $table, string $on, ?array $parameters): Sqlx\PgReadQueryBuilder;
    public function join(string $table, string $on, ?array $parameters): Sqlx\PgReadQueryBuilder;
    public function leftJoin(string $table, string $on, ?array $parameters): Sqlx\PgReadQueryBuilder;
    public function rightJoin(string $table, string $on, ?array $parameters): Sqlx\PgReadQueryBuilder;
    public function fullJoin(string $table, string $on, ?array $parameters): Sqlx\PgReadQueryBuilder;
    public function crossJoin(string $table, string $on, ?array $parameters): Sqlx\PgReadQueryBuilder;
    public function naturalJoin(string $table): Sqlx\PgReadQueryBuilder;
    public function with(string $table, mixed $as_, ?array $parameters): Sqlx\PgReadQueryBuilder;
    public function where(mixed $where_, ?array $parameters): Sqlx\PgReadQueryBuilder;
    public function union(mixed $query, ?array $parameters): Sqlx\PgReadQueryBuilder;
    public function unionAll(mixed $query, ?array $parameters): Sqlx\PgReadQueryBuilder;
    public function having(mixed $having, ?array $parameters): Sqlx\PgReadQueryBuilder;
    public function limit(int $limit, ?int $offset): Sqlx\PgReadQueryBuilder;
    public function offset(int $offset): Sqlx\PgReadQueryBuilder;
    public function deleteFrom(mixed $from, ?array $parameters): Sqlx\PgReadQueryBuilder;
    public function using(mixed $from, ?array $parameters): Sqlx\PgReadQueryBuilder;
    public function paginate(mixed $paginate): Sqlx\PgReadQueryBuilder;
    public function withRecursive(string $table_and_fields, mixed $as_, ?array $parameters): Sqlx\PgReadQueryBuilder;
    public function update(mixed $table): Sqlx\PgReadQueryBuilder;
    public function set(mixed $set): Sqlx\PgReadQueryBuilder;
    public function dry(): array;
    public function dryInline(): string;
    public function __toString(): string;
    public function parameters(): array;
    public function raw(string $part, ?array $parameters): Sqlx\PgReadQueryBuilder;
    public function select(mixed $fields): Sqlx\PgReadQueryBuilder;
    public function orderBy(mixed $fields): Sqlx\PgReadQueryBuilder;
    public function groupBy(mixed $fields): Sqlx\PgReadQueryBuilder;
    public function forUpdate(): Sqlx\PgReadQueryBuilder;
    public function forShare(): Sqlx\PgReadQueryBuilder;
    public function insertInto(string $table): Sqlx\PgReadQueryBuilder;
    public function replaceInto(string $table): Sqlx\PgReadQueryBuilder;
    public function values(mixed $values): Sqlx\PgReadQueryBuilder;
    public function truncateTable(string $table): Sqlx\PgReadQueryBuilder;
    public function end(string $_table): Sqlx\PgReadQueryBuilder;
    public function valuesMany(mixed $rows): Sqlx\PgReadQueryBuilder;
    public function returning(mixed $fields): Sqlx\PgReadQueryBuilder;
    public function from(mixed $from, ?array $parameters): Sqlx\PgReadQueryBuilder;
    public function queryColumnDictionary(?array $parameters): mixed;
    public function queryColumnDictionaryAssoc(?array $parameters): mixed;
    public function queryColumnDictionaryObj(?array $parameters): mixed;
    public function queryDictionary(?array $parameters): mixed;
    public function queryDictionaryAssoc(?array $parameters): mixed;
    public function queryDictionaryObj(?array $parameters): mixed;
    public function queryGroupedDictionary(?array $parameters): mixed;
    public function queryGroupedDictionaryAssoc(?array $parameters): mixed;
    public function queryGroupedDictionaryObj(?array $parameters): mixed;
    public function queryGroupedColumnDictionary(?array $parameters): mixed;
    public function queryGroupedColumnDictionaryAssoc(?array $parameters): mixed;
    public function queryGroupedColumnDictionaryObj(?array $parameters): mixed;
    public function execute(?array $parameters): int;
    public function queryRow(?array $parameters): mixed;
    public function queryRowAssoc(?array $parameters): mixed;
    public function queryRowObj(?array $parameters): mixed;
    public function queryMaybeRow(?array $parameters): mixed;
    public function queryMaybeRowAssoc(?array $parameters): mixed;
    public function queryMaybeRowObj(?array $parameters): mixed;
    public function queryColumn(?array $parameters, mixed $column): array;
    public function queryColumnAssoc(?array $parameters, mixed $column): array;
    public function queryColumnObj(?array $parameters, mixed $column): array;
    public function queryAll(?array $parameters): array;
    public function queryAllAssoc(?array $parameters): array;
    public function queryAllObj(?array $parameters): array;
    public function __construct();
    public function builder(): Sqlx\MssqlReadQueryBuilder;
    public function factory(Sqlx\MssqlDriver $driver): Sqlx\MssqlReadQueryBuilder;
    public function quote(mixed $param): string;
    public function metaQuoteLike(mixed $param): string;
    public function onConflict(mixed $target, mixed $set): Sqlx\MssqlReadQueryBuilder;
    public function onDuplicateKeyUpdate(mixed $set): Sqlx\MssqlReadQueryBuilder;
    public function innerJoin(string $table, string $on, ?array $parameters): Sqlx\MssqlReadQueryBuilder;
    public function join(string $table, string $on, ?array $parameters): Sqlx\MssqlReadQueryBuilder;
    public function leftJoin(string $table, string $on, ?array $parameters): Sqlx\MssqlReadQueryBuilder;
    public function rightJoin(string $table, string $on, ?array $parameters): Sqlx\MssqlReadQueryBuilder;
    public function fullJoin(string $table, string $on, ?array $parameters): Sqlx\MssqlReadQueryBuilder;
    public function crossJoin(string $table, string $on, ?array $parameters): Sqlx\MssqlReadQueryBuilder;
    public function naturalJoin(string $table): Sqlx\MssqlReadQueryBuilder;
    public function with(string $table, mixed $as_, ?array $parameters): Sqlx\MssqlReadQueryBuilder;
    public function where(mixed $where_, ?array $parameters): Sqlx\MssqlReadQueryBuilder;
    public function union(mixed $query, ?array $parameters): Sqlx\MssqlReadQueryBuilder;
    public function unionAll(mixed $query, ?array $parameters): Sqlx\MssqlReadQueryBuilder;
    public function having(mixed $having, ?array $parameters): Sqlx\MssqlReadQueryBuilder;
    public function limit(int $limit, ?int $offset): Sqlx\MssqlReadQueryBuilder;
    public function offset(int $offset): Sqlx\MssqlReadQueryBuilder;
    public function deleteFrom(mixed $from, ?array $parameters): Sqlx\MssqlReadQueryBuilder;
    public function using(mixed $from, ?array $parameters): Sqlx\MssqlReadQueryBuilder;
    public function paginate(mixed $paginate): Sqlx\MssqlReadQueryBuilder;
    public function withRecursive(string $table_and_fields, mixed $as_, ?array $parameters): Sqlx\MssqlReadQueryBuilder;
    public function update(mixed $table): Sqlx\MssqlReadQueryBuilder;
    public function set(mixed $set): Sqlx\MssqlReadQueryBuilder;
    public function dry(): array;
    public function dryInline(): string;
    public function __toString(): string;
    public function parameters(): array;
    public function raw(string $part, ?array $parameters): Sqlx\MssqlReadQueryBuilder;
    public function select(mixed $fields): Sqlx\MssqlReadQueryBuilder;
    public function orderBy(mixed $fields): Sqlx\MssqlReadQueryBuilder;
    public function groupBy(mixed $fields): Sqlx\MssqlReadQueryBuilder;
    public function forUpdate(): Sqlx\MssqlReadQueryBuilder;
    public function forShare(): Sqlx\MssqlReadQueryBuilder;
    public function insertInto(string $table): Sqlx\MssqlReadQueryBuilder;
    public function replaceInto(string $table): Sqlx\MssqlReadQueryBuilder;
    public function values(mixed $values): Sqlx\MssqlReadQueryBuilder;
    public function truncateTable(string $table): Sqlx\MssqlReadQueryBuilder;
    public function end(string $_table): Sqlx\MssqlReadQueryBuilder;
    public function valuesMany(mixed $rows): Sqlx\MssqlReadQueryBuilder;
    public function returning(mixed $fields): Sqlx\MssqlReadQueryBuilder;
    public function from(mixed $from, ?array $parameters): Sqlx\MssqlReadQueryBuilder;
    public function queryColumnDictionary(?array $parameters): mixed;
    public function queryColumnDictionaryAssoc(?array $parameters): mixed;
    public function queryColumnDictionaryObj(?array $parameters): mixed;
    public function queryDictionary(?array $parameters): mixed;
    public function queryDictionaryAssoc(?array $parameters): mixed;
    public function queryDictionaryObj(?array $parameters): mixed;
    public function queryGroupedDictionary(?array $parameters): mixed;
    public function queryGroupedDictionaryAssoc(?array $parameters): mixed;
    public function queryGroupedDictionaryObj(?array $parameters): mixed;
    public function queryGroupedColumnDictionary(?array $parameters): mixed;
    public function queryGroupedColumnDictionaryAssoc(?array $parameters): mixed;
    public function queryGroupedColumnDictionaryObj(?array $parameters): mixed;
    public function execute(?array $parameters): int;
    public function queryRow(?array $parameters): mixed;
    public function queryRowAssoc(?array $parameters): mixed;
    public function queryRowObj(?array $parameters): mixed;
    public function queryMaybeRow(?array $parameters): mixed;
    public function queryMaybeRowAssoc(?array $parameters): mixed;
    public function queryMaybeRowObj(?array $parameters): mixed;
    public function queryColumn(?array $parameters, mixed $column): array;
    public function queryColumnAssoc(?array $parameters, mixed $column): array;
    public function queryColumnObj(?array $parameters, mixed $column): array;
    public function queryAll(?array $parameters): array;
    public function queryAllAssoc(?array $parameters): array;
    public function queryAllObj(?array $parameters): array;
    public function __construct();
}

interface RowInterface
{
    public function offsetExists(mixed $offset): bool;
    public function __get(string $name): mixed;
    public function offsetGet(mixed $offset): mixed;
    public function offsetSet(mixed $offset, mixed $value): void;
    public function offsetUnset(mixed $offset): void;
    public function __construct();
}

interface RowJsonInterface
{
    public function takeZval(): mixed;
    public function __construct();
}

interface SqlDriverInterface
{
    public function prepare(string $query): Sqlx\MySqlPreparedQuery;
    public function builder(): Sqlx\MySqlWriteQueryBuilder;
    public function readBuilder(): Sqlx\MySqlReadQueryBuilder;
    public function quote(mixed $param): string;
    public function metaQuoteLike(mixed $param): string;
    public function assocArrays(): bool;
    public function queryRow(string $query, ?array $parameters): mixed;
    public function queryValue(string $query, ?array $parameters, mixed $column): mixed;
    public function queryValueAssoc(string $query, ?array $parameters, mixed $column): mixed;
    public function queryValueObj(string $query, ?array $parameters, mixed $column): mixed;
    public function queryMaybeValue(string $query, ?array $parameters, mixed $column): mixed;
    public function queryMaybeValueAssoc(string $query, ?array $parameters, mixed $column): mixed;
    public function queryMaybeValueObj(string $query, ?array $parameters, mixed $column): mixed;
    public function queryRowAssoc(string $query, ?array $parameters): mixed;
    public function queryRowObj(string $query, ?array $parameters): mixed;
    public function queryMaybeRow(string $query, ?array $parameters): mixed;
    public function queryMaybeRowAssoc(string $query, ?array $parameters): mixed;
    public function queryMaybeRowObj(string $query, ?array $parameters): mixed;
    public function queryColumn(string $query, ?array $parameters, mixed $column): array;
    public function queryColumnAssoc(string $query, ?array $parameters, mixed $column): array;
    public function queryColumnObj(string $query, ?array $parameters, mixed $column): array;
    public function queryAll(string $query, ?array $parameters): array;
    public function queryAllAssoc(string $query, ?array $parameters): array;
    public function queryAllObj(string $query, ?array $parameters): array;
    public function queryDictionary(string $query, ?array $parameters): mixed;
    public function queryDictionaryAssoc(string $query, ?array $parameters): mixed;
    public function queryDictionaryObj(string $query, ?array $parameters): mixed;
    public function queryGroupedDictionary(string $query, ?array $parameters): mixed;
    public function queryGroupedDictionaryAssoc(string $query, ?array $parameters): mixed;
    public function queryGroupedDictionaryObj(string $query, ?array $parameters): mixed;
    public function queryColumnDictionary(string $query, ?array $parameters): mixed;
    public function queryColumnDictionaryAssoc(string $query, ?array $parameters): mixed;
    public function queryColumnDictionaryObj(string $query, ?array $parameters): mixed;
    public function queryGroupedColumnDictionaryAssoc(string $query, ?array $parameters): mixed;
    public function queryGroupedColumnDictionaryObj(string $query, ?array $parameters): mixed;
    public function queryGroupedColumnDictionary(string $query, ?array $parameters): mixed;
    public function execute(string $query, ?array $parameters): int;
    public function insert(string $table, array $row): int;
    public function dry(string $query, ?array $parameters): array;
    public function begin(callable $callable): void;
    public function savepoint(string $savepoint): void;
    public function rollbackToSavepoint(string $savepoint): void;
    public function releaseSavepoint(string $savepoint): void;
    public function __construct(mixed $url_or_options);
}

interface SqlPreparedQueryInterface
{
    public function queryColumnDictionary(?array $parameters): mixed;
    public function queryColumnDictionaryAssoc(?array $parameters): mixed;
    public function queryColumnDictionaryObj(?array $parameters): mixed;
    public function queryDictionary(?array $parameters): mixed;
    public function queryDictionaryAssoc(?array $parameters): mixed;
    public function queryDictionaryObj(?array $parameters): mixed;
    public function queryGroupedDictionary(?array $parameters): mixed;
    public function queryGroupedDictionaryAssoc(?array $parameters): mixed;
    public function queryGroupedDictionaryObj(?array $parameters): mixed;
    public function queryGroupedColumnDictionary(?array $parameters): mixed;
    public function queryGroupedColumnDictionaryAssoc(?array $parameters): mixed;
    public function queryGroupedColumnDictionaryObj(?array $parameters): mixed;
    public function execute(?array $parameters): int;
    public function queryRow(?array $parameters): mixed;
    public function queryRowAssoc(?array $parameters): mixed;
    public function queryRowObj(?array $parameters): mixed;
    public function queryMaybeRow(?array $parameters): mixed;
    public function queryMaybeRowAssoc(?array $parameters): mixed;
    public function queryMaybeRowObj(?array $parameters): mixed;
    public function queryColumn(?array $parameters, mixed $column): array;
    public function queryColumnAssoc(?array $parameters, mixed $column): array;
    public function queryColumnObj(?array $parameters, mixed $column): array;
    public function queryAll(?array $parameters): array;
    public function queryAllAssoc(?array $parameters): array;
    public function queryAllObj(?array $parameters): array;
    public function __construct();
}

interface SqlReadQueryBuilderInterface
{
    public function builder(): Sqlx\MySqlReadQueryBuilder;
    public function factory(Sqlx\MySqlDriver $driver): Sqlx\MySqlReadQueryBuilder;
    public function quote(mixed $param): string;
    public function metaQuoteLike(mixed $param): string;
    public function onConflict(mixed $target, mixed $set): Sqlx\MySqlReadQueryBuilder;
    public function onDuplicateKeyUpdate(mixed $set): Sqlx\MySqlReadQueryBuilder;
    public function innerJoin(string $table, string $on, ?array $parameters): Sqlx\MySqlReadQueryBuilder;
    public function join(string $table, string $on, ?array $parameters): Sqlx\MySqlReadQueryBuilder;
    public function leftJoin(string $table, string $on, ?array $parameters): Sqlx\MySqlReadQueryBuilder;
    public function rightJoin(string $table, string $on, ?array $parameters): Sqlx\MySqlReadQueryBuilder;
    public function fullJoin(string $table, string $on, ?array $parameters): Sqlx\MySqlReadQueryBuilder;
    public function crossJoin(string $table, string $on, ?array $parameters): Sqlx\MySqlReadQueryBuilder;
    public function naturalJoin(string $table): Sqlx\MySqlReadQueryBuilder;
    public function with(string $table, mixed $as_, ?array $parameters): Sqlx\MySqlReadQueryBuilder;
    public function where(mixed $where_, ?array $parameters): Sqlx\MySqlReadQueryBuilder;
    public function union(mixed $query, ?array $parameters): Sqlx\MySqlReadQueryBuilder;
    public function unionAll(mixed $query, ?array $parameters): Sqlx\MySqlReadQueryBuilder;
    public function having(mixed $having, ?array $parameters): Sqlx\MySqlReadQueryBuilder;
    public function limit(int $limit, ?int $offset): Sqlx\MySqlReadQueryBuilder;
    public function offset(int $offset): Sqlx\MySqlReadQueryBuilder;
    public function deleteFrom(mixed $from, ?array $parameters): Sqlx\MySqlReadQueryBuilder;
    public function using(mixed $from, ?array $parameters): Sqlx\MySqlReadQueryBuilder;
    public function paginate(mixed $paginate): Sqlx\MySqlReadQueryBuilder;
    public function withRecursive(string $table_and_fields, mixed $as_, ?array $parameters): Sqlx\MySqlReadQueryBuilder;
    public function update(mixed $table): Sqlx\MySqlReadQueryBuilder;
    public function set(mixed $set): Sqlx\MySqlReadQueryBuilder;
    public function dry(): array;
    public function dryInline(): string;
    public function __toString(): string;
    public function parameters(): array;
    public function raw(string $part, ?array $parameters): Sqlx\MySqlReadQueryBuilder;
    public function select(mixed $fields): Sqlx\MySqlReadQueryBuilder;
    public function orderBy(mixed $fields): Sqlx\MySqlReadQueryBuilder;
    public function groupBy(mixed $fields): Sqlx\MySqlReadQueryBuilder;
    public function forUpdate(): Sqlx\MySqlReadQueryBuilder;
    public function forShare(): Sqlx\MySqlReadQueryBuilder;
    public function insertInto(string $table): Sqlx\MySqlReadQueryBuilder;
    public function replaceInto(string $table): Sqlx\MySqlReadQueryBuilder;
    public function values(mixed $values): Sqlx\MySqlReadQueryBuilder;
    public function truncateTable(string $table): Sqlx\MySqlReadQueryBuilder;
    public function end(string $_table): Sqlx\MySqlReadQueryBuilder;
    public function valuesMany(mixed $rows): Sqlx\MySqlReadQueryBuilder;
    public function returning(mixed $fields): Sqlx\MySqlReadQueryBuilder;
    public function from(mixed $from, ?array $parameters): Sqlx\MySqlReadQueryBuilder;
    public function queryColumnDictionary(?array $parameters): mixed;
    public function queryColumnDictionaryAssoc(?array $parameters): mixed;
    public function queryColumnDictionaryObj(?array $parameters): mixed;
    public function queryDictionary(?array $parameters): mixed;
    public function queryDictionaryAssoc(?array $parameters): mixed;
    public function queryDictionaryObj(?array $parameters): mixed;
    public function queryGroupedDictionary(?array $parameters): mixed;
    public function queryGroupedDictionaryAssoc(?array $parameters): mixed;
    public function queryGroupedDictionaryObj(?array $parameters): mixed;
    public function queryGroupedColumnDictionary(?array $parameters): mixed;
    public function queryGroupedColumnDictionaryAssoc(?array $parameters): mixed;
    public function queryGroupedColumnDictionaryObj(?array $parameters): mixed;
    public function execute(?array $parameters): int;
    public function queryRow(?array $parameters): mixed;
    public function queryRowAssoc(?array $parameters): mixed;
    public function queryRowObj(?array $parameters): mixed;
    public function queryMaybeRow(?array $parameters): mixed;
    public function queryMaybeRowAssoc(?array $parameters): mixed;
    public function queryMaybeRowObj(?array $parameters): mixed;
    public function queryColumn(?array $parameters, mixed $column): array;
    public function queryColumnAssoc(?array $parameters, mixed $column): array;
    public function queryColumnObj(?array $parameters, mixed $column): array;
    public function queryAll(?array $parameters): array;
    public function queryAllAssoc(?array $parameters): array;
    public function queryAllObj(?array $parameters): array;
    public function __construct();
}

interface SqlWriteQueryBuilderInterface
{
    public function builder(): Sqlx\MySqlWriteQueryBuilder;
    public function factory(Sqlx\MySqlDriver $driver): Sqlx\MySqlWriteQueryBuilder;
    public function quote(mixed $param): string;
    public function metaQuoteLike(mixed $param): string;
    public function onConflict(mixed $target, mixed $set): Sqlx\MySqlWriteQueryBuilder;
    public function onDuplicateKeyUpdate(mixed $set): Sqlx\MySqlWriteQueryBuilder;
    public function innerJoin(string $table, string $on, ?array $parameters): Sqlx\MySqlWriteQueryBuilder;
    public function join(string $table, string $on, ?array $parameters): Sqlx\MySqlWriteQueryBuilder;
    public function leftJoin(string $table, string $on, ?array $parameters): Sqlx\MySqlWriteQueryBuilder;
    public function rightJoin(string $table, string $on, ?array $parameters): Sqlx\MySqlWriteQueryBuilder;
    public function fullJoin(string $table, string $on, ?array $parameters): Sqlx\MySqlWriteQueryBuilder;
    public function crossJoin(string $table, string $on, ?array $parameters): Sqlx\MySqlWriteQueryBuilder;
    public function naturalJoin(string $table): Sqlx\MySqlWriteQueryBuilder;
    public function with(string $table, mixed $as_, ?array $parameters): Sqlx\MySqlWriteQueryBuilder;
    public function where(mixed $where_, ?array $parameters): Sqlx\MySqlWriteQueryBuilder;
    public function union(mixed $query, ?array $parameters): Sqlx\MySqlWriteQueryBuilder;
    public function unionAll(mixed $query, ?array $parameters): Sqlx\MySqlWriteQueryBuilder;
    public function having(mixed $having, ?array $parameters): Sqlx\MySqlWriteQueryBuilder;
    public function limit(int $limit, ?int $offset): Sqlx\MySqlWriteQueryBuilder;
    public function offset(int $offset): Sqlx\MySqlWriteQueryBuilder;
    public function deleteFrom(mixed $from, ?array $parameters): Sqlx\MySqlWriteQueryBuilder;
    public function using(mixed $from, ?array $parameters): Sqlx\MySqlWriteQueryBuilder;
    public function paginate(mixed $paginate): Sqlx\MySqlWriteQueryBuilder;
    public function withRecursive(string $table_and_fields, mixed $as_, ?array $parameters): Sqlx\MySqlWriteQueryBuilder;
    public function update(mixed $table): Sqlx\MySqlWriteQueryBuilder;
    public function set(mixed $set): Sqlx\MySqlWriteQueryBuilder;
    public function dry(): array;
    public function dryInline(): string;
    public function __toString(): string;
    public function parameters(): array;
    public function raw(string $part, ?array $parameters): Sqlx\MySqlWriteQueryBuilder;
    public function select(mixed $fields): Sqlx\MySqlWriteQueryBuilder;
    public function orderBy(mixed $fields): Sqlx\MySqlWriteQueryBuilder;
    public function groupBy(mixed $fields): Sqlx\MySqlWriteQueryBuilder;
    public function forUpdate(): Sqlx\MySqlWriteQueryBuilder;
    public function forShare(): Sqlx\MySqlWriteQueryBuilder;
    public function insertInto(string $table): Sqlx\MySqlWriteQueryBuilder;
    public function replaceInto(string $table): Sqlx\MySqlWriteQueryBuilder;
    public function values(mixed $values): Sqlx\MySqlWriteQueryBuilder;
    public function truncateTable(string $table): Sqlx\MySqlWriteQueryBuilder;
    public function end(string $_table): Sqlx\MySqlWriteQueryBuilder;
    public function valuesMany(mixed $rows): Sqlx\MySqlWriteQueryBuilder;
    public function returning(mixed $fields): Sqlx\MySqlWriteQueryBuilder;
    public function from(mixed $from, ?array $parameters): Sqlx\MySqlWriteQueryBuilder;
    public function queryColumnDictionary(?array $parameters): mixed;
    public function queryColumnDictionaryAssoc(?array $parameters): mixed;
    public function queryColumnDictionaryObj(?array $parameters): mixed;
    public function queryDictionary(?array $parameters): mixed;
    public function queryDictionaryAssoc(?array $parameters): mixed;
    public function queryDictionaryObj(?array $parameters): mixed;
    public function queryGroupedDictionary(?array $parameters): mixed;
    public function queryGroupedDictionaryAssoc(?array $parameters): mixed;
    public function queryGroupedDictionaryObj(?array $parameters): mixed;
    public function queryGroupedColumnDictionary(?array $parameters): mixed;
    public function queryGroupedColumnDictionaryAssoc(?array $parameters): mixed;
    public function queryGroupedColumnDictionaryObj(?array $parameters): mixed;
    public function execute(?array $parameters): int;
    public function queryRow(?array $parameters): mixed;
    public function queryRowAssoc(?array $parameters): mixed;
    public function queryRowObj(?array $parameters): mixed;
    public function queryMaybeRow(?array $parameters): mixed;
    public function queryMaybeRowAssoc(?array $parameters): mixed;
    public function queryMaybeRowObj(?array $parameters): mixed;
    public function queryColumn(?array $parameters, mixed $column): array;
    public function queryColumnAssoc(?array $parameters, mixed $column): array;
    public function queryColumnObj(?array $parameters, mixed $column): array;
    public function queryAll(?array $parameters): array;
    public function queryAllAssoc(?array $parameters): array;
    public function queryAllObj(?array $parameters): array;
    public function __construct();
}

interface WrapperInterface
{
    public function __construct();
}

interface WriteQueryBuilderInterface
{
    public function builder(): Sqlx\PgWriteQueryBuilder;
    public function factory(Sqlx\PgDriver $driver): Sqlx\PgWriteQueryBuilder;
    public function quote(mixed $param): string;
    public function metaQuoteLike(mixed $param): string;
    public function onConflict(mixed $target, mixed $set): Sqlx\PgWriteQueryBuilder;
    public function onDuplicateKeyUpdate(mixed $set): Sqlx\PgWriteQueryBuilder;
    public function innerJoin(string $table, string $on, ?array $parameters): Sqlx\PgWriteQueryBuilder;
    public function join(string $table, string $on, ?array $parameters): Sqlx\PgWriteQueryBuilder;
    public function leftJoin(string $table, string $on, ?array $parameters): Sqlx\PgWriteQueryBuilder;
    public function rightJoin(string $table, string $on, ?array $parameters): Sqlx\PgWriteQueryBuilder;
    public function fullJoin(string $table, string $on, ?array $parameters): Sqlx\PgWriteQueryBuilder;
    public function crossJoin(string $table, string $on, ?array $parameters): Sqlx\PgWriteQueryBuilder;
    public function naturalJoin(string $table): Sqlx\PgWriteQueryBuilder;
    public function with(string $table, mixed $as_, ?array $parameters): Sqlx\PgWriteQueryBuilder;
    public function where(mixed $where_, ?array $parameters): Sqlx\PgWriteQueryBuilder;
    public function union(mixed $query, ?array $parameters): Sqlx\PgWriteQueryBuilder;
    public function unionAll(mixed $query, ?array $parameters): Sqlx\PgWriteQueryBuilder;
    public function having(mixed $having, ?array $parameters): Sqlx\PgWriteQueryBuilder;
    public function limit(int $limit, ?int $offset): Sqlx\PgWriteQueryBuilder;
    public function offset(int $offset): Sqlx\PgWriteQueryBuilder;
    public function deleteFrom(mixed $from, ?array $parameters): Sqlx\PgWriteQueryBuilder;
    public function using(mixed $from, ?array $parameters): Sqlx\PgWriteQueryBuilder;
    public function paginate(mixed $paginate): Sqlx\PgWriteQueryBuilder;
    public function withRecursive(string $table_and_fields, mixed $as_, ?array $parameters): Sqlx\PgWriteQueryBuilder;
    public function update(mixed $table): Sqlx\PgWriteQueryBuilder;
    public function set(mixed $set): Sqlx\PgWriteQueryBuilder;
    public function dry(): array;
    public function dryInline(): string;
    public function __toString(): string;
    public function parameters(): array;
    public function raw(string $part, ?array $parameters): Sqlx\PgWriteQueryBuilder;
    public function select(mixed $fields): Sqlx\PgWriteQueryBuilder;
    public function orderBy(mixed $fields): Sqlx\PgWriteQueryBuilder;
    public function groupBy(mixed $fields): Sqlx\PgWriteQueryBuilder;
    public function forUpdate(): Sqlx\PgWriteQueryBuilder;
    public function forShare(): Sqlx\PgWriteQueryBuilder;
    public function insertInto(string $table): Sqlx\PgWriteQueryBuilder;
    public function replaceInto(string $table): Sqlx\PgWriteQueryBuilder;
    public function values(mixed $values): Sqlx\PgWriteQueryBuilder;
    public function truncateTable(string $table): Sqlx\PgWriteQueryBuilder;
    public function end(string $_table): Sqlx\PgWriteQueryBuilder;
    public function valuesMany(mixed $rows): Sqlx\PgWriteQueryBuilder;
    public function returning(mixed $fields): Sqlx\PgWriteQueryBuilder;
    public function from(mixed $from, ?array $parameters): Sqlx\PgWriteQueryBuilder;
    public function queryColumnDictionary(?array $parameters): mixed;
    public function queryColumnDictionaryAssoc(?array $parameters): mixed;
    public function queryColumnDictionaryObj(?array $parameters): mixed;
    public function queryDictionary(?array $parameters): mixed;
    public function queryDictionaryAssoc(?array $parameters): mixed;
    public function queryDictionaryObj(?array $parameters): mixed;
    public function queryGroupedDictionary(?array $parameters): mixed;
    public function queryGroupedDictionaryAssoc(?array $parameters): mixed;
    public function queryGroupedDictionaryObj(?array $parameters): mixed;
    public function queryGroupedColumnDictionary(?array $parameters): mixed;
    public function queryGroupedColumnDictionaryAssoc(?array $parameters): mixed;
    public function queryGroupedColumnDictionaryObj(?array $parameters): mixed;
    public function execute(?array $parameters): int;
    public function queryRow(?array $parameters): mixed;
    public function queryRowAssoc(?array $parameters): mixed;
    public function queryRowObj(?array $parameters): mixed;
    public function queryMaybeRow(?array $parameters): mixed;
    public function queryMaybeRowAssoc(?array $parameters): mixed;
    public function queryMaybeRowObj(?array $parameters): mixed;
    public function queryColumn(?array $parameters, mixed $column): array;
    public function queryColumnAssoc(?array $parameters, mixed $column): array;
    public function queryColumnObj(?array $parameters, mixed $column): array;
    public function queryAll(?array $parameters): array;
    public function queryAllAssoc(?array $parameters): array;
    public function queryAllObj(?array $parameters): array;
    public function __construct();
    public function builder(): Sqlx\MssqlWriteQueryBuilder;
    public function factory(Sqlx\MssqlDriver $driver): Sqlx\MssqlWriteQueryBuilder;
    public function quote(mixed $param): string;
    public function metaQuoteLike(mixed $param): string;
    public function onConflict(mixed $target, mixed $set): Sqlx\MssqlWriteQueryBuilder;
    public function onDuplicateKeyUpdate(mixed $set): Sqlx\MssqlWriteQueryBuilder;
    public function innerJoin(string $table, string $on, ?array $parameters): Sqlx\MssqlWriteQueryBuilder;
    public function join(string $table, string $on, ?array $parameters): Sqlx\MssqlWriteQueryBuilder;
    public function leftJoin(string $table, string $on, ?array $parameters): Sqlx\MssqlWriteQueryBuilder;
    public function rightJoin(string $table, string $on, ?array $parameters): Sqlx\MssqlWriteQueryBuilder;
    public function fullJoin(string $table, string $on, ?array $parameters): Sqlx\MssqlWriteQueryBuilder;
    public function crossJoin(string $table, string $on, ?array $parameters): Sqlx\MssqlWriteQueryBuilder;
    public function naturalJoin(string $table): Sqlx\MssqlWriteQueryBuilder;
    public function with(string $table, mixed $as_, ?array $parameters): Sqlx\MssqlWriteQueryBuilder;
    public function where(mixed $where_, ?array $parameters): Sqlx\MssqlWriteQueryBuilder;
    public function union(mixed $query, ?array $parameters): Sqlx\MssqlWriteQueryBuilder;
    public function unionAll(mixed $query, ?array $parameters): Sqlx\MssqlWriteQueryBuilder;
    public function having(mixed $having, ?array $parameters): Sqlx\MssqlWriteQueryBuilder;
    public function limit(int $limit, ?int $offset): Sqlx\MssqlWriteQueryBuilder;
    public function offset(int $offset): Sqlx\MssqlWriteQueryBuilder;
    public function deleteFrom(mixed $from, ?array $parameters): Sqlx\MssqlWriteQueryBuilder;
    public function using(mixed $from, ?array $parameters): Sqlx\MssqlWriteQueryBuilder;
    public function paginate(mixed $paginate): Sqlx\MssqlWriteQueryBuilder;
    public function withRecursive(string $table_and_fields, mixed $as_, ?array $parameters): Sqlx\MssqlWriteQueryBuilder;
    public function update(mixed $table): Sqlx\MssqlWriteQueryBuilder;
    public function set(mixed $set): Sqlx\MssqlWriteQueryBuilder;
    public function dry(): array;
    public function dryInline(): string;
    public function __toString(): string;
    public function parameters(): array;
    public function raw(string $part, ?array $parameters): Sqlx\MssqlWriteQueryBuilder;
    public function select(mixed $fields): Sqlx\MssqlWriteQueryBuilder;
    public function orderBy(mixed $fields): Sqlx\MssqlWriteQueryBuilder;
    public function groupBy(mixed $fields): Sqlx\MssqlWriteQueryBuilder;
    public function forUpdate(): Sqlx\MssqlWriteQueryBuilder;
    public function forShare(): Sqlx\MssqlWriteQueryBuilder;
    public function insertInto(string $table): Sqlx\MssqlWriteQueryBuilder;
    public function replaceInto(string $table): Sqlx\MssqlWriteQueryBuilder;
    public function values(mixed $values): Sqlx\MssqlWriteQueryBuilder;
    public function truncateTable(string $table): Sqlx\MssqlWriteQueryBuilder;
    public function end(string $_table): Sqlx\MssqlWriteQueryBuilder;
    public function valuesMany(mixed $rows): Sqlx\MssqlWriteQueryBuilder;
    public function returning(mixed $fields): Sqlx\MssqlWriteQueryBuilder;
    public function from(mixed $from, ?array $parameters): Sqlx\MssqlWriteQueryBuilder;
    public function queryColumnDictionary(?array $parameters): mixed;
    public function queryColumnDictionaryAssoc(?array $parameters): mixed;
    public function queryColumnDictionaryObj(?array $parameters): mixed;
    public function queryDictionary(?array $parameters): mixed;
    public function queryDictionaryAssoc(?array $parameters): mixed;
    public function queryDictionaryObj(?array $parameters): mixed;
    public function queryGroupedDictionary(?array $parameters): mixed;
    public function queryGroupedDictionaryAssoc(?array $parameters): mixed;
    public function queryGroupedDictionaryObj(?array $parameters): mixed;
    public function queryGroupedColumnDictionary(?array $parameters): mixed;
    public function queryGroupedColumnDictionaryAssoc(?array $parameters): mixed;
    public function queryGroupedColumnDictionaryObj(?array $parameters): mixed;
    public function execute(?array $parameters): int;
    public function queryRow(?array $parameters): mixed;
    public function queryRowAssoc(?array $parameters): mixed;
    public function queryRowObj(?array $parameters): mixed;
    public function queryMaybeRow(?array $parameters): mixed;
    public function queryMaybeRowAssoc(?array $parameters): mixed;
    public function queryMaybeRowObj(?array $parameters): mixed;
    public function queryColumn(?array $parameters, mixed $column): array;
    public function queryColumnAssoc(?array $parameters, mixed $column): array;
    public function queryColumnObj(?array $parameters, mixed $column): array;
    public function queryAll(?array $parameters): array;
    public function queryAllAssoc(?array $parameters): array;
    public function queryAllObj(?array $parameters): array;
    public function __construct();
}

interface \MssqlPreparedQueryInterface
{
    public function queryColumnDictionary(?array $parameters): mixed;
    public function queryColumnDictionaryAssoc(?array $parameters): mixed;
    public function queryColumnDictionaryObj(?array $parameters): mixed;
    public function queryDictionary(?array $parameters): mixed;
    public function queryDictionaryAssoc(?array $parameters): mixed;
    public function queryDictionaryObj(?array $parameters): mixed;
    public function queryGroupedDictionary(?array $parameters): mixed;
    public function queryGroupedDictionaryAssoc(?array $parameters): mixed;
    public function queryGroupedDictionaryObj(?array $parameters): mixed;
    public function queryGroupedColumnDictionary(?array $parameters): mixed;
    public function queryGroupedColumnDictionaryAssoc(?array $parameters): mixed;
    public function queryGroupedColumnDictionaryObj(?array $parameters): mixed;
    public function execute(?array $parameters): int;
    public function queryRow(?array $parameters): mixed;
    public function queryRowAssoc(?array $parameters): mixed;
    public function queryRowObj(?array $parameters): mixed;
    public function queryMaybeRow(?array $parameters): mixed;
    public function queryMaybeRowAssoc(?array $parameters): mixed;
    public function queryMaybeRowObj(?array $parameters): mixed;
    public function queryColumn(?array $parameters, mixed $column): array;
    public function queryColumnAssoc(?array $parameters, mixed $column): array;
    public function queryColumnObj(?array $parameters, mixed $column): array;
    public function queryAll(?array $parameters): array;
    public function queryAllAssoc(?array $parameters): array;
    public function queryAllObj(?array $parameters): array;
    public function __construct();
}

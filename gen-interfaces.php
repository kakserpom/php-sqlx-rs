<?php

/**
 * This script generates `interfaces.php` for the Sqlx extension.
 *
 * It follows the rule:
 *     ([A-Z][a-z]+)(.*) → implements {$2}Interface
 * For example:
 *     PgDriver → DriverInterface
 *     PgWriteQueryBuilder → WriteQueryBuilderInterface
 */

$extensionName = 'sqlx'; // the name of your extension
$targetNamespace = 'Sqlx';
$interfaces = [];
$classes = [];

foreach (get_declared_classes() as $className) {
    $refl = new ReflectionClass($className);
    if ($refl->isInternal() && $refl->getExtensionName() === $extensionName) {
        $classes[] = $refl;
    }
}

foreach ($classes as $class) {
    if (!preg_match('/^' . preg_quote($targetNamespace) . '\\\\([A-Z][a-z]+)(.*)$/', $class->getName(), $m)) {
        continue;
    }

    [, $prefix, $suffix] = $m;
    $interfaceName = $suffix . 'Interface';
    $interfaces[$interfaceName]['methods'] = $interfaces[$interfaceName]['methods'] ?? [];

    foreach ($class->getMethods(ReflectionMethod::IS_PUBLIC) as $method) {
        if ($method->getDeclaringClass()->getName() !== $class->getName()) {
            continue; // skip inherited
        }

        $signature = 'public function ' . $method->getName() . '(';
        $params = [];
        foreach ($method->getParameters() as $param) {
            $paramStr = '';
            if ($param->hasType()) {
                $paramStr .= $param->getType() . ' ';
            }
            $paramStr .= '$' . $param->getName();
            if ($param->isOptional() && !$param->allowsNull()) {
                $paramStr .= ' = ' . var_export($param->getDefaultValue(), true);
            }
            $params[] = $paramStr;
        }
        $signature .= implode(', ', $params) . ')';
        if ($method->hasReturnType()) {
            $signature .= ': ' . $method->getReturnType();
        }

        $doc = $method->getDocComment() ?: '';
        $interfaces[$interfaceName]['methods'][] = [$doc, $signature . ';'];
    }
}

ksort($interfaces);

$out = <<<PHP
<?php

/**
 * This file defines SOLID-style PHP interfaces for Sqlx classes.
 * Autogenerated. Do not edit manually.
 */

namespace $targetNamespace;

PHP;

foreach ($interfaces as $name => $info) {
    $out .= <<<PHP

interface $name
{

PHP;
    foreach ($info['methods'] as [$doc, $sig]) {
        if ($doc) {
            $out .= "\n    " . str_replace("\n", "\n    ", $doc) . "\n";
        }
        $out .= "    $sig\n";
    }

    $out .= "}\n";
}

file_put_contents('interfaces.generated.php', $out);
echo "Generated interfaces.generated.php\n";
